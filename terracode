provider "aws" {

region = "ap-south-1"


}

resource "tls_private_key" "mykey" {

  algorithm = "RSA"

}

resource "aws_key_pair" "generated_key" {

  key_name   = "mykey"

  public_key = "${tls_private_key.mykey.public_key_openssh}"

  depends_on = [

    tls_private_key.mykey

  ]

}

resource "local_file" "key-file" {

  content  = "${tls_private_key.mykey.private_key_pem}"

  filename = "mykey.pem"

  depends_on = [

    tls_private_key.mykey

  ]
}

resource "aws_security_group" "sgfornfs" {
  name        = "sgfornfs"
  description = "this is security group for ec2 instance"
 

  ingress {
    description = "http from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
ingress {
    description = "allowing nfs"
    from_port   = 2049
    to_port     = 2049
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

 egress {
    description = "allow all outbound rules"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "sg_for_efs"
  }
}

resource "aws_instance" "mytask2" {

depends_on = [
    aws_security_group.sgfornfs,
  ]
  ami           = "ami-0447a12f28fddb066"
  instance_type = "t2.micro"
  key_name     = aws_key_pair.generated_key.key_name
security_groups = ["${aws_security_group.sgfornfs.name}"]

connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key ="${tls_private_key.mykey.private_key_pem}"
    host     = aws_instance.mytask2.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd  php git -y",
      "sudo yum -y update",  
      "sudo reboot",  
      "sudo yum -y install nfs-utils",
      "sudo service httpd enable",
      "sudo service  httpd restart ",
    ]
  }

  tags = {
    Name = "mytask2"
  }

}



resource "aws_efs_file_system" "myefs" {
depends_on =[ aws_instance.mytask2 
          ]

  creation_token = "file_system"
  encrypted = "true"
  tags = {
    Name = "Myefs"
  }
}


resource "aws_efs_mount_target" "mount_target" {
  depends_on = [aws_efs_file_system.myefs,aws_instance.mytask2,
  aws_security_group.sgfornfs,]

  file_system_id = "${aws_efs_file_system.myefs.id}"
  subnet_id      = "${aws_instance.mytask2.subnet_id}"
  security_groups = ["${aws_security_group.sgfornfs.id}"]
  
 
   connection{
 
    type     = "ssh"
    user     = "ec2-user"
    private_key = "${tls_private_key.mykey.private_key_pem}"
    host     = aws_instance.mytask2.public_ip
  }

provisioner "remote-exec" {
    inline = [
  "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${aws_efs_file_system.my-efs.dns_name}:/ /var/www/html",
  "sudo su -c \"echo '${aws_efs_file_system.my-efs.dns_name}:/ /var/www/html nfs4 defaults,vers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 0 0' >> /etc/fstab\""
   ]   
}
}



// creating s3 bucket

resource "aws_s3_bucket" "akank" {

depends_on = [
    aws_efs_mount_target.mount_target
  ]

  bucket = "akankbucket"
  acl    = "private"
  versioning {
   enabled = true
}

  tags = {
    Name   =  "bucketfortask2"
    Environment = "Dev"
  }
 
}
locals {
   s3_origin_id  =  "myS3Origin"
}

//Uploading a file to a bucket

resource "aws_s3_bucket_object" "object" {
 
  bucket = aws_s3_bucket.akank.bucket
  key    = "aws-efs-tera.jpg"
  source = "C:/Users/Admin/Pictures/Saved Pictures/aws-efs-tera.jpg" 
  acl =   "public-read"
}



 resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "Some comment"
}

resource "aws_cloudfront_distribution"  "s3_distribution" {
  
depends_on=[

 aws_s3_bucket_object.object,
 

]
  origin {
    domain_name = aws_s3_bucket.akank.bucket_regional_domain_name
  //akankbucket.s3.amazonaws.com
    origin_id   = local.s3_origin_id
  
s3_origin_config {
       origin_access_identity = "${aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path}"
    }
}
  
 connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key ="${tls_private_key.mykey.private_key_pem}"
    host     = aws_instance.mytask2.public_ip
  }


provisioner "remote-exec" {
    inline = [ 
       " sudo su << EOF ",
      " sudo echo \"<img src ='http://${self.domain_name}/${aws_s3_bucket_object.object.key}'  height='400' width='400'>\" >> /var/www/html/index.html",
       "EOF"
    ]
 }

  enabled             = true
  is_ipv6_enabled     = true
   comment =    "some comment"
   default_root_object =  "index.html"
logging_config {
   include_cookies  = false
   bucket  =  "akankbucket.s3.amazonaws.com"
   prefix  = "myprefix"
}
  

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  // Cache behavior with precedence 0  
 ordered_cache_behavior {

    path_pattern     = "/content/immutable/*"

    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false
      headers      = ["Origin"]

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

 ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "${local.s3_origin_id}"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

 
   
   price_class = "PriceClass_All"
   
   restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
 tags = {
    Environment = "production"
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
     }


 

resource "null_resource" "nullremote1"  {

depends_on = [
     aws_efs_mount_target.mount_target,
    
  ]

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = "${tls_private_key.mykey.private_key_pem}"
    host     = aws_instance.mytask2.public_ip
  }

provisioner "remote-exec" {
    inline = [
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/akku0225/multicloud.git  /var/www/html/"
    ]
  }
}

 
 








 
